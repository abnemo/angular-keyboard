{"version":3,"sources":["/source/keyboard.module.js","/source/KbListController.js","/source/kbScrollTo.js","/source/undefined.js","/source/directives/kbItem.js","/source/directives/kbList.js"],"names":[],"mappings":"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","file":"keyboard.min.js","sourcesContent":["/**\n * angular-keyboard\n *\n * Keyboard behavior for AngularJS Webapps\n *\n *\n * Inspired by: Apple Mail\n * Implementation inspirated by: WinJS ListView http://try.buildwinjs.com/pages/listview/options/default.html\n */\nangular.module('keyboard', []);","angular.module('keyboard').factory('KbListController', function (undefined) {\n    'use strict';\n    /**\n     * @class KbListController\n     * @ngInject @param {jQElement} $element\n     */\n    function KbListController($element) {\n        this.mode = 'list';\n\n        this.selected = undefined; // Selected model(s)\n        this.active = undefined; // Model of the current list-item.\n        this.focus = undefined; // Model of the current list-item and the listview is focussed.\n\n        this._element = $element[0];\n        this._isFocusEvent = false; // Used to determine a the scroll delay, to prevent swallowed clicks\n    }\n    angular.extend(KbListController.prototype, {\n        /** @lends kbListController */\n\n        /**\n         * Select the given model.\n         * Or in multiselect mode, add the given model to the selection.\n         *\n         * @param {*} model\n         */\n        select: function (model) {\n            this.active = model;\n            if (this.mode === 'multiselect') {\n                if (this.isSelected(model) === false) {\n                    this.selected.push(model);\n                }\n            } else {\n                this.selected = model;\n            }\n        },\n        /**\n         * Deselect the given model.\n         * Or in multiselect mode, removes the given model to the selection.\n         * Does nothing if the given model isn't selected.\n         *\n         * @param {*} model\n         */\n        deselect: function (model) {\n            this.active = model;\n            if (this.mode === 'multiselect') {\n                var index = this.selected.indexOf(model);\n                if (index !== -1) {\n                    this.selected.splice(index, 1);\n                }\n            } else if (model === this.selected) {\n                this.selected = undefined;\n            }\n        },\n        /**\n         * Select or deselect the given model.\n         * Or in multiselect mode, adds or removes the given model to the selection.\n         *\n         * @param {*} model\n         */\n        toggle: function (model) {\n            if (this.isSelected(model)) {\n                this.deselect(model);\n            } else {\n                this.select(model);\n            }\n        },\n        /**\n         * Check if the given model is selected.\n         *\n         * @param {*} model\n         * @returns {Boolean}\n         */\n        isSelected: function (model) {\n            if (this.mode === 'multiselect') {\n                return this.selected.indexOf(model) !== -1;\n            } else {\n                return this.selected === model;\n            }\n        },\n        /**\n         * Activate the previous listview-item.\n         *\n         * @returns {Boolean}\n         */\n        previous: function () {\n            var prev = this._locate(this.active).previous;\n            if (prev) {\n                this.active = prev.model;\n                return true;\n            }\n            return false;\n        },\n        /**\n         * Activate the next listview-item.\n         *\n         * @returns {Boolean}\n         */\n        next: function () {\n            var next = this._locate(this.active).next;\n            if (next) {\n                this.active = next.model;\n                return true;\n            }\n            return false;\n        },\n        /**\n         * Returns the element, controller and models from the current, prevous and next listview-item.\n         *\n         * @param {*} model\n         * @returns {Object}\n         */\n        _locate: function (model) {\n            var items = this._element.querySelectorAll('[kb-item]');\n            for (var i = 0; i < items.length; i++) {\n                var el = angular.element(items.item(i));\n                var controller = el.controller('kbItem');\n                if (controller.getModel() === model) {\n                    var location = {\n                        model: model,\n                        controller: controller,\n                        element: el\n                    };\n                    if (i !== 0) {\n                        var prev = {\n                            element: angular.element(items.item(i - 1))\n                        };\n                        prev.controller = prev.element.controller('kbItem');\n                        prev.model = prev.controller.getModel();\n                        location.previous = prev;\n                    }\n                    if (i < items.length - 1) {\n                        var next = {\n                            element: angular.element(items.item(i + 1))\n                        };\n                        next.controller = next.element.controller('kbItem');\n                        next.model = next.controller.getModel();\n                        location.next = next;\n                    }\n                    return location;\n                }\n            }\n            return {};\n        },\n        /**\n         * Returns the element, controller and model of the first listview-item.\n         * @returns {Object}\n         */\n        first: function () {\n            var first = {};\n            var el = this._element.querySelector('[kb-item]');\n            if (el) {\n                first.element = angular.element(el);\n                first.controller = first.element.controller('kbItem');\n                first.model = first.controller.getModel();\n            }\n            return first;\n        }\n    });\n    return KbListController;\n});","/**\n * Helper for scrolling the active (and focussed) kb-item into a viewable area.\n */\nangular.module('keyboard').factory('kbScrollTo', function ($window) {\n    var noop = angular.noop;\n\n    var duration = 150;\n    // Most browsers scroll via scrollTop on the <body> element.\n    var viewportNode = 'BODY';\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n        viewportNode = 'HTML'; // Firefox uses the scrollTop on <html> element.\n    }\n\n    /**\n     * Change the scrollposition animated and return a function that cancels the animation\n     *\n     * @param {Element} container\n     * @param {String} property 'scrollTop' or 'scrollLeft'\n     * @param {Number} value\n     * @param {Boolean} animated\n     * @returns {Function}\n     */\n    function change(container, property, value, animated) {\n        if (animated && angular.element.prototype.animate) { // jQuery.animate is available?\n            var el = angular.element(container);\n            var props = {};\n            props[property] = value;\n            el.animate(props, duration);\n            return function () {\n                el.stop(true, true);\n            };\n        } else {\n            container[property] = value;\n            return noop;\n        }\n    }\n\n    /**\n     *\n     * @param {Element} el\n     * @param {Object} offset  Allowed hidden\n     * @param {Boolean} animated\n     * @returns {Function} cancel animation\n     */\n    function kbScrollTo(el, offset, animated) {\n        var cancelAnimation = noop;\n        var parent = el.parentElement;\n        while (parent.nodeName !== viewportNode) {\n            var parentStyle = getComputedStyle(parent);\n            var overflowStyle = parentStyle.overflow + parentStyle.overflowX + parentStyle.overflowY;\n            if (overflowStyle.match(/scroll|hidden/)) {\n                break;\n            }\n            parent = parent.parentElement;\n        }\n        var elRect = el.getBoundingClientRect();\n        var pos = {\n            top: Math.ceil(elRect.top),\n            right: Math.ceil(elRect.right),\n            bottom: Math.ceil(elRect.bottom),\n            left: Math.ceil(elRect.left)\n        };\n        // @todo Add outline-width to pos\n        if (parent.nodeName === viewportNode) {\n            var parentPos = {\n                top: 0,\n                right: $window.innerWidth,\n                bottom: $window.innerHeight,\n                left: 0\n            };\n        } else {\n            var parentRect = parent.getBoundingClientRect();\n            var parentPos = {\n                top: Math.ceil(parentRect.top),\n                right: Math.ceil(parentRect.right),\n                bottom: Math.ceil(parentRect.bottom),\n                left: Math.ceil(parentRect.left)\n            };\n        }\n//        console.info(el.nodeName, pos, 'in', parent.nodeName, parentPos, 'offset', offset);\n\n        var relTop = pos.top - parentPos.top;\n        var relRight = parentPos.right - pos.right;\n        var relBottom = parentPos.bottom - pos.bottom;\n        var relLeft = pos.left - parentPos.left;\n\n        if (relTop + offset.top < 0) { // up\n            cancelAnimation = change(parent, 'scrollTop', parent.scrollTop + relTop + offset.top, animated);\n            relBottom += relTop;\n            relTop = 0;\n        } else if (relBottom + offset.bottom < 0) { // down\n            cancelAnimation = change(parent, 'scrollTop', parent.scrollTop - relBottom + offset.bottom, animated);\n            relTop += relBottom;\n            relBottom = 0;\n        }\n        if (relLeft + offset.left < 0) { // left\n            cancelAnimation = change(parent, 'scrollLeft', parent.scrollLeft + relLeft + offset.left, animated);\n            relRight += relLeft;\n            relLeft = 0;\n        } else if (relRight + offset.right < 0) { // right\n            cancelAnimation = change(parent, 'scrollLeft', parent.scrollLeft - relRight + offset.right, animated);\n            relLeft += relRight;\n            relRight = 0;\n        }\n        if (parent.nodeName === viewportNode) {\n            return cancelAnimation;\n        }\n        var cancelParentAnimation = kbScrollTo(parent, {top: relTop, right: relTop, bottom: relBottom, left: relLeft}, animated);\n        return function () {\n            cancelAnimation();\n            cancelParentAnimation();\n        };\n    }\n    return kbScrollTo;\n});\n","/**\n * Register 'undefined' with an undefined value.\n */\nangular.module('keyboard').constant('undefined');\n","/**\n * kb-item\n */\nangular.module('keyboard').directive('kbItem', function ($animate, $parse, kbScrollTo, $timeout) {\n    'use strict';\n    var timer = null;\n    var cancelAnimation = angular.noop;\n    function scrollTo(el, _isFocusEvent) {\n        // Wrapped in a timeout, prevents issues with focus & click events and scrolls to the last activated kb-item.\n        $timeout.cancel(timer);\n        if (_isFocusEvent) {\n            timer = $timeout(function () {\n                cancelAnimation();\n                cancelAnimation = kbScrollTo(el[0], {top: 0, right: 0, bottom: 0, left: 0}, false);\n            }, 100, false);\n        } else {\n            cancelAnimation();\n            cancelAnimation = kbScrollTo(el[0], {top: 0, right: 0, bottom: 0, left: 0}, true);\n        }\n    }\n    return {\n        controller: function ($scope, $element) {\n            this.getModel = (function () {\n                var getter = $parse($element.attr('kb-item'));\n                return function () {\n                    return getter($scope);\n                };\n            }());\n        },\n        require: ['^kbList', 'kbItem'],\n        link: function ($scope, el, attrs, controllers) {\n            var kbList = controllers[0];\n            var kbItem = controllers[1];\n\n            el.on('click', function () {\n                if (kbList.mode === 'list') {\n                    kbList.select(kbItem.getModel());\n                } else {\n                    kbList.toggle(kbItem.getModel());\n                }\n                $scope.$apply();\n            });\n            var selectedClass = attrs.kbSelectedClass || 'kb-selected';\n            $scope.$watch(function () {\n                return kbList.isSelected(kbItem.getModel());\n            }, function (isSelected) {\n                if (isSelected) {\n                    $animate.addClass(el, selectedClass);\n                } else {\n                    $animate.removeClass(el, selectedClass);\n                }\n            });\n            var activeClass = attrs.kbActiveClass || 'kb-active';\n            $scope.$watch(function () {\n                return kbList.active === kbItem.getModel();\n            }, function (isActive) {\n                if (isActive) {\n                    $animate.addClass(el, activeClass);\n                } else {\n                    $animate.removeClass(el, activeClass);\n                }\n            });\n            var focusClass = attrs.kbFocusClass || 'kb-focus';\n            $scope.$watch(function () {\n                return kbList.focus === kbItem.getModel();\n            }, function (hasFocus) {\n                if (hasFocus) {\n                    $animate.addClass(el, focusClass);\n                    scrollTo(el, kbList._isFocusEvent);\n                } else {\n                    $animate.removeClass(el, focusClass);\n                }\n            });\n        }\n    };\n});\n","/**\n * kb-list directive\n *\n * Usage:\n * <div kb-list ng-model=\"selection\"> ... <div kb-item=\"aItem\">...</div> ... </div>\n */\nangular.module('keyboard').directive('kbList', function (KbListController) {\n    'use strict';\n\n    return {\n        controller: KbListController,\n        require: ['kbList', 'ngModel'],\n        link: function ($scope, el, attrs, controllers) {\n            var kbList = controllers[0];\n            var ngModel = controllers[1];\n            var hasFocus = false;\n\n            kbList.mode = attrs.kbList;\n\n            ngModel.$render = function () {\n                if (kbList.mode === 'multiselect') {\n                    var value = ngModel.$viewValue;\n                    if (angular.isArray(value) === false) {\n                        value = [];\n                    }\n                    kbList.selected = value;\n                    for (var i in value) {\n                        kbList.active = value[i];\n                        break;\n                    }\n                } else {\n                    kbList.selected = kbList.active = ngModel.$viewValue;\n                }\n            };\n            if (angular.isUndefined(el.attr('tabindex'))) {\n                el.attr('tabindex', 0);\n            }\n            el.on('click', function () {\n                if (document.activeElement !== this) { // not(:focus) ?\n                    // In Internet Explorer a click doesn't focus containers. ><\n                    el.focus();\n                }\n            });\n            el.on('focus', function (e) {\n                kbList._isFocusEvent = true;\n                if (angular.isUndefined(kbList.active)) {\n                    kbList.active = kbList.first().model;\n                }\n                kbList.focus = kbList.active;\n                hasFocus = true;\n                $scope.$apply();\n                kbList._isFocusEvent = false;\n            });\n            el.on('blur', function () {\n                kbList.focus = null;\n                hasFocus = false;\n                $scope.$apply();\n            });\n            /**\n             * Check if an ClientRect is in given direction.\n             * Allows for keyboard navigation based on an elements relative visual location.\n             *\n             * @param {string} direction 'up', 'left', 'right' or 'down',\n             * @param {ClientRect} currentRect The position of the current item.\n             */\n            function checkLocation(direction, currentRect, targetRect) {\n                if (direction === 'left' && targetRect.left < currentRect.left) {\n                    return true;\n                }\n                if (direction === 'up' && targetRect.top < currentRect.top) {\n                    return true;\n                }\n                if (direction === 'right' && targetRect.left > currentRect.left) {\n                    return true;\n                }\n                if (direction === 'down' && targetRect.top > currentRect.top) {\n                    return true;\n                }\n                return false;\n            }\n            // { e.which: direction }\n            var directions = {\n                37: 'left',\n                38: 'up',\n                39: 'right',\n                40: 'down'\n            };\n            el.on('keydown', function (e) {\n                if (angular.isUndefined(kbList.active)) {\n                    return; // all keyboard action require an active listview-item\n                }\n                var changed = false;\n                if (e.which >= 37 && e.which <= 40) { // An arrow-key?\n                    var location = kbList._locate(kbList.active);\n                    var currentRect = location.element[0].getBoundingClientRect();\n                    if (location.previous && checkLocation(directions[e.which], currentRect, location.previous.element[0].getBoundingClientRect())) {\n                        kbList.active = location.previous.model;\n                        changed = true;\n                    }\n                    if (location.next && checkLocation(directions[e.which], currentRect, location.next.element[0].getBoundingClientRect())) {\n                        kbList.active = location.next.model;\n                        changed = true;\n                    }\n                } else if (kbList.mode !== 'list' && (e.which === 32 || e.which === 13)) { // Space || Enter\n                    kbList.toggle(kbList.active);\n                    changed = true;\n                }\n                if (changed) {\n                    e.preventDefault();\n                    $scope.$apply();\n                }\n            });\n            $scope.$watch(function () {\n                return kbList.selected;\n            }, function (value) {\n                ngModel.$setViewValue(value);\n            });\n            $scope.$watch(function () {\n                return kbList.active;\n            }, function (value) {\n                if (kbList.mode === 'list') {\n                    kbList.selected = value;\n                }\n                if (hasFocus) {\n                    kbList.focus = value;\n                }\n            });\n        }\n    };\n});"],"sourceRoot":"/source/"}