{"version":3,"sources":["/source/keyboard.module.js","/source/undefined.js","/source/directives/KbContainerController.js","/source/directives/KbItemController.js","/source/directives/kbItem.js","/source/directives/kbList.js","/source/directives/kbSelect.js","/source/services/kbFocus.js","/source/services/kbScrollTo.js"],"names":[],"mappings":"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","file":"keyboard.min.js","sourcesContent":["/**\n * angular-keyboard\n *\n * Keyboard behavior for AngularJS Webapps\n *\n *\n * Inspired by: Apple Mail\n * Implementation inspirated by: WinJS ListView http://try.buildwinjs.com/pages/listview/options/default.html\n */\nangular.module('keyboard', []);","/**\n * Register 'undefined' with the `undefined` value.\n */\nangular.module('keyboard').constant('undefined');\n","angular.module('keyboard').factory('KbContainerController', function (undefined, $parse) {\n    'use strict';\n    /**\n     * @class KbListController\n     * @ngInject @param {jQElement} $element\n     */\n    function KbContainerController($element) {\n\n        this.selected = []; // Selected kbItem(s)\n        this.multiple = false;\n\n        this.active = undefined; // kbItemController of the active kb-item.\n        this._element = $element[0];\n        this.itemAvailable = false; // New item(s) available in the DOM?\n\n    }\n    angular.extend(KbContainerController.prototype, {\n        /** @lends kbListController */\n\n        activate: function (kbItem) {\n            this.active = kbItem;\n            kbItem.focus();\n        },\n\n        invoke: function () {\n            return false;\n        },\n\n        /**\n         * Select the given model.\n         * Or in multiselect mode, add the given model to the selection.\n         *\n         * @param {*} model\n         */\n        select: function (model) {\n            if (this.multiple) {\n                if (this.isSelected(model) === false) {\n                    this.selected.push(model);\n                    this.setModel(this.selected);\n                }\n            } else {\n                this.selected[0] = model;\n                this.setModel(model);\n            }\n\n        },\n        /**\n         * Deselect the given model.\n         * Does nothing if the given model isn't selected.\n         *\n         * @param {*} model\n         */\n        deselect: function (model) {\n            var index = this.selected.indexOf(model);\n            if (index !== -1) {\n                this.selected.splice(index, 1);\n            }\n        },\n        /**\n         * Select or deselect the given model.\n         * Or in multiselect mode, adds or removes the given model to the selection.\n         *\n         * @param {*} model\n         */\n        toggle: function (model) {\n            if (this.isSelected(model)) {\n                this.deselect(model);\n            } else {\n                this.select(model);\n            }\n        },\n        /**\n         * Check if the given model is selected.\n         *\n         * @param {*} model\n         * @returns {Boolean}\n         */\n        isSelected: function (model) {\n            return (this.selected.indexOf(model) !== -1);\n        },\n        /**\n         * Activate the previous item.\n         *\n         * @returns {Boolean}\n         */\n        previous: function () {\n            var prev = this._getSiblingItems(this.active).previous;\n            if (prev) {\n                this.active = prev;\n                return true;\n            }\n            return false;\n        },\n        /**\n         * Activate the next item.\n         *\n         * @returns {Boolean}\n         */\n        next: function () {\n            var next = this._getSiblingItems(this.active).next;\n            if (next) {\n                this.active = next;\n                return true;\n            }\n            return false;\n        },\n        /**\n         * Returns the (first) kbItemController  which has the given model value.\n         * @returns {KbItemController}\n         */\n        _locate: function (model) {\n            var items = this._element.querySelectorAll('[kb-item]');\n            for (var i = 0; i < items.length; i++) {\n                var kbItem = angular.element(items.item(i)).controller('kbItem');\n                if (kbItem.getModel() === model) {\n                    return kbItem;\n                }\n            }\n        },\n        /**\n         * Returns the element, controller and models from the current, prevous and next item.\n         *\n         * @param {KbItemController} kbItem\n         * @returns {Object} with up to 2 KbItemControllers: previous and next.\n         */\n        _getSiblingItems: function (kbItem) {\n            var element = kbItem.element[0];\n            var items = this._element.querySelectorAll('[kb-item]');\n            for (var i = 0; i < items.length; i++) {\n                var el = items.item(i);\n                if (el === element) {\n                    var siblings = {};\n                    if (i !== 0) {\n                        siblings.previous = angular.element(items.item(i - 1)).controller('kbItem');\n                    }\n                    if (i < items.length - 1) {\n                        siblings.next = angular.element(items.item(i + 1)).controller('kbItem');\n                    }\n                    return siblings;\n                }\n            }\n            return {};\n        },\n        /**\n         * Returns the controller of the first item.\n         * @returns {kbItemController}\n         */\n        first: function () {\n            var el = this._element.querySelector('[kb-item]');\n            if (el) {\n                return el.controller('kbItem');\n            }\n        },\n\n        bind: function ($scope, expression) {\n            var parsed = $parse(expression);\n            this.getModel = function (value) {\n                return parsed($scope, value);\n            };\n            this.setModel = function (value) {\n                return parsed.assign($scope, value);\n            };\n            if (this.multiple) {\n                this.selected = this.getModel() || [];\n            } else {\n                this.selected[0] = this.getModel();\n            }\n        }\n    });\n    return KbContainerController;\n});","angular.module('keyboard').factory('KbItemController', function (kbFocus) {\n    'use strict';\n\n    /**\n     * @class KbItemController\n     * @param {jQElement} $element\n     * @ngInject\n     */\n    function KbItemController($element) {\n    \tthis.element = $element;\n    }\n\n    angular.extend(KbItemController.prototype, {\n    \tfocus: function () {\n    \t\tthis.element.attr('tabindex', 0);\n            kbFocus(this.element);\n    \t}\n    });\n    return KbItemController;\n\n});\n","/**\n * kb-item\n */\nangular.module('keyboard').directive('kbItem', function (KbItemController, $animate, $log) {\n    'use strict';\n    return {\n        controller: KbItemController,\n        require: ['kbItem', '?^kbList', '?^kbSelect'],\n        link: function ($scope, el, attrs, controllers) {\n            var kbItem = controllers[0];\n            var kbContainer = controllers[1];\n            for (var i = 1; i < controllers.length; i++) {\n                if (controllers[i]) {\n                    kbContainer = controllers[i];\n                }\n            }\n            if (!kbContainer) {\n                $log.error(\"Controller 'kbList' or 'kbSelect', required by directive 'kbItem', can't be found!\");\n                return;\n            }\n\n            var selectedClass = attrs.kbSelectedClass || 'kb-selected';\n            var activeClass = attrs.kbActiveClass || 'kb-active';\n\n            // Bind the model\n            kbItem.model = $scope.$eval(attrs.kbItem);\n            $scope.$watch(attrs.kbItem, function (model) {\n                kbItem.model = model;\n            });\n\n            if (angular.isUndefined(kbContainer.active)) {\n                kbContainer.active = kbItem;\n            } else if (kbContainer.isSelected(kbItem.model) && kbContainer.isSelected(kbItem.active) === false) {\n                kbContainer.active = kbItem;\n            }\n            $scope.$watch(function () {\n                return kbContainer.isSelected(kbItem.model);\n            }, function (isSelected) {\n                if (isSelected) {\n                    $animate.addClass(el, selectedClass);\n                } else {\n                    $animate.removeClass(el, selectedClass);\n                }\n            });\n            $scope.$watch(function () {\n                return kbContainer.active === kbItem;\n            }, function (isActive) {\n                if (isActive) {\n                    el.attr('tabindex', 0);\n                    $animate.addClass(el, activeClass);\n                } else {\n                    $animate.removeClass(el, activeClass);\n                    if (el.is('a') || el.is('button')) {\n                        el.attr('tabindex', 0);\n                    } else {\n                        el.removeAttr('tabindex');\n                    }\n                }\n            });\n\n            /**\n             * Calculates the distance to the ClientRect in a given direction.\n             * Allows for keyboard navigation based on the relative visual location of the element.\n             *\n             * @param {string} direction 'up', 'left', 'right' or 'down',\n             * @param {ClientRect} currentRect The position of the current item.\n             * @return {Number}\n             */\n            function distance(direction, currentRect, targetRect) {\n                if (direction === 'left' && targetRect.left < currentRect.left) {\n                    return currentRect.left - targetRect.left;\n                }\n                if (direction === 'up' && targetRect.top < currentRect.top) {\n                    return currentRect.top - targetRect.top;\n                }\n                if (direction === 'right' && targetRect.left > currentRect.left) {\n                    return targetRect.left - currentRect.left;\n                }\n                if (direction === 'down' && targetRect.top > currentRect.top) {\n                    return targetRect.top - currentRect.top;\n                }\n                return 0;\n            }\n            // { e.which: direction }\n            var directions = {\n                37: 'left',\n                38: 'up',\n                39: 'right',\n                40: 'down'\n            };\n            el.on('keydown', function (e) {\n                var changed = false;\n                if (e.which >= 37 && e.which <= 40) { // An arrow-key?\n                    var siblings = kbContainer._getSiblingItems(kbItem);\n                    var currentRect = el[0].getBoundingClientRect();\n                    if (siblings.previous && distance(directions[e.which], currentRect, siblings.previous.element[0].getBoundingClientRect())) {\n                        kbContainer.activate(siblings.previous);\n                        changed = true;\n                    }\n                    if (siblings.next && distance(directions[e.which], currentRect, siblings.next.element[0].getBoundingClientRect())) {\n                        kbContainer.activate(siblings.next);\n                        changed = true;\n                    }\n                } else if (e.which === 32 || e.which === 13) { // Space || Enter\n                    changed = kbContainer.invoke(kbItem);\n                }\n                if (changed) {\n                    e.preventDefault();\n                    $scope.$apply();\n                }\n            });\n            el.on('click', function () {\n                kbContainer.activate(kbItem);\n                kbContainer.invoke(kbItem);\n                $scope.$apply();\n            });\n            $scope.$on('$destroy', function () {\n               kbContainer.active = kbContainer.first();\n            });\n        }\n    };\n});\n","/**\n * kb-list directive\n *\n * Usage:\n * <div kb-list ng-model=\"selection\"> ... <div kb-item=\"aItem\">...</div> ... </div>\n */\nangular.module('keyboard').directive('kbList', function (KbContainerController, $parse) {\n    'use strict';\n\n    return {\n        controller: KbContainerController,\n        require: 'kbList',\n        link: function ($scope, el, attrs, kbContainer) {\n            kbContainer.activate = function (kbItem) {\n                this.select(kbItem.model);\n                return KbContainerController.prototype.activate.apply(this, arguments);\n            };\n            kbContainer.bind($scope, attrs.kbList);\n//            var getModal =ter = $parse(attrs.attrs);\n\n//            ngModel.$render = function () {\n//                if (kbContainer.mode === 'multiselect') {\n//                    kbContainer.selected = angular.isArray(ngModel.$viewValue) ? ngModel.$viewValue : [];\n//                    for (var i in kbContainer.selected) {\n//                        var kbItem = kbContainer._locate(kbContainer.selected[i]);\n//                        if (kbItem) {\n//                            kbContainer.active = kbItem;\n//                            break;\n//                        }\n//                    }\n//                } else {\n//                    kbContainer.selected[0] = ngModel.$viewValue;\n//                    var kbItem = kbContainer._locate(kbContainer.selected[0]);\n//                    if (kbItem) {\n//                        kbContainer.active = kbItem;\n//                    }\n//                }\n//            };\n            $scope.$watch(function () {\n                return kbContainer.selected;\n            }, function (selected) {\n                if (kbContainer.mode === 'multiselect') {\n//                    ngModel.$setViewValue(selected);\n                } else {\n//                    ngModel.$setViewValue(selected[0]);\n                }\n            });\n        }\n    };\n});","/**\n * kb-select directive\n *\n * Usage:\n * <div kb-select=\"selection\"> ... <div kb-item=\"aItem\">...</div> ... </div>\n */\nangular.module('keyboard').directive('kbSelect', function (KbContainerController) {\n    'use strict';\n\n    return {\n        controller: KbContainerController,\n        require: 'kbSelect',\n        link: function ($scope, el, attrs, kbContainer) {\n\n            kbContainer.invoke = function (kbItem) {\n                this.toggle(kbItem.model);\n                return true;\n            };\n\n            kbContainer.bind($scope, attrs.kbSelect);\n\n;\n\n//            ngModel.$render = function () {\n//                if (kbContainer.mode === 'multiselect') {\n//                    kbContainer.selected = angular.isArray(ngModel.$viewValue) ? ngModel.$viewValue : [];\n//                    for (var i in kbContainer.selected) {\n//                        var kbItem = kbContainer._locate(kbContainer.selected[i]);\n//                        if (kbItem) {\n//                            kbContainer.active = kbItem;\n//                            break;\n//                        }\n//                    }\n//                } else {\n//                    kbContainer.selected[0] = ngModel.$viewValue;\n//                    var kbItem = kbContainer._locate(kbContainer.selected[0]);\n//                    if (kbItem) {\n//                        kbContainer.active = kbItem;\n//                    }\n//                }\n//            };\n            $scope.$watch(function () {\n                return kbContainer.selected;\n            }, function (selected) {\n                if (kbContainer.mode === 'multiselect') {\n//                    ngModel.$setViewValue(selected);\n                } else {\n//                    ngModel.$setViewValue(selected[0]);\n                }\n            });\n        }\n    };\n});","/**\n * Focus an element, but\n */\nangular.module('keyboard').factory('kbFocus', function (kbScrollTo) {\n//    var duration = 150;\n//    var cancelAnimation = angular.noop;\n//    function scrollTo(el, _isFocusEvent) {\n//        // Wrapped in a timeout, prevents issues with focus & click events and scrolls to the last activated kb-item.\n//        $timeout.cancel(timer);\n//        if (_isFocusEvent) {\n//            timer = $timeout(function () {\n//                cancelAnimation();\n//                cancelAnimation = kbScrollTo(el[0], {top: 0, right: 0, bottom: 0, left: 0}, 0);\n//            }, 100, false);\n//        } else {\n//            cancelAnimation();\n//            cancelAnimation = kbScrollTo(el[0], {top: 0, right: 0, bottom: 0, left: 0}, 150);\n//        }\n//    }\n    // var focusClass = attrs.kbFocusClass || 'kb-focus';\n            // $scope.$watch(function () {\n            //     return kbList.focus === kbItem.getModel();\n            // }, function (hasFocus) {\n            //     if (hasFocus) {\n            //         $animate.addClass(el, focusClass);\n            //         scrollTo(el, kbList._isFocusEvent);\n            //     } else {\n            //         $animate.removeClass(el, focusClass);\n            //     }\n            // });\n        var timer = null;\n\n// if (angular.isUndefined(el.attr('tabindex'))) {\n            //     el.attr('tabindex', 0);\n            // }\n            // el.on('click', function () {\n            //     if (document.activeElement !== this) { // not(:focus) ?\n            //         // In Internet Explorer a click doesn't focus containers. ><\n            //         el.focus();\n            //     }\n            // });\n            // el.on('focus', function (e) {\n            //     kbList._isFocusEvent = true;\n            //     if (angular.isUndefined(kbList.active)) {\n            //         kbList.active = kbList.first().model;\n            //     }\n            //     kbList.focus = kbList.active;\n            //     hasFocus = true;\n            //     $scope.$apply();\n            //     kbList._isFocusEvent = false;\n            // });\n            // el.on('blur', function () {\n            //     kbList.focus = null;\n            //     hasFocus = false;\n            //     $scope.$apply();\n            // });\n\n//    var cancel = angular.noop;\n    /**\n     *\n     * @param {Element} el\n     */\n    return function(el) {\n//        console.log(el);\n//        cancel();\n//        cancel = kbScrollTo(el)\n\n        el.focus();\n\n    };\n});","/**\n * Helper for scrolling an element into the viewable area.\n */\nangular.module('keyboard').factory('kbScrollTo', function ($window) {\n\n    var duration = 150;\n    // Most browsers scroll via scrollTop on the <body> element.\n    var viewportNode = 'BODY';\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n        viewportNode = 'HTML'; // Except Firefox, which uses scrollTop on <html> element.\n    }\n\n    /**\n     * Change the scrollposition animated and return a function that cancels the animation.\n     *\n     * @param {Element} container\n     * @param {String} property 'scrollTop' or 'scrollLeft'\n     * @param {Number} value\n     * @param {Number} duration\n     * @returns {Function}\n     */\n    function change(container, property, value, duration) {\n        if (duration && angular.element.prototype.animate) { // jQuery.animate is available?\n            var el = angular.element(container);\n            var props = {};\n            props[property] = value;\n            el.animate(props, duration);\n            return function () {\n                el.stop(true, true);\n            };\n        } else {\n            container[property] = value;\n            return angular.noop;\n        }\n    }\n\n    /**\n     *\n     * @param {Element} el  The DOMElement\n     * @param {Object} offset  Allowed hidden\n     * @param {Number} duration  Duration of the animation in ms\n     * @returns {Function} cancel animation\n     */\n    function kbScrollTo(el, offset, duration) {\n        var cancelAnimation = angular.noop;\n        var parent = el.parentElement;\n        while (parent.nodeName !== viewportNode) {\n            var parentStyle = getComputedStyle(parent);\n            var overflowStyle = parentStyle.overflow + parentStyle.overflowX + parentStyle.overflowY;\n            if (overflowStyle.match(/scroll|hidden/)) {\n                break;\n            }\n            parent = parent.parentElement;\n        }\n        var elRect = el.getBoundingClientRect();\n        var pos = {\n            top: Math.ceil(elRect.top),\n            right: Math.ceil(elRect.right),\n            bottom: Math.ceil(elRect.bottom),\n            left: Math.ceil(elRect.left)\n        };\n        // @todo Add outline-width to pos\n        if (parent.nodeName === viewportNode) {\n            var parentPos = {\n                top: 0,\n                right: $window.innerWidth,\n                bottom: $window.innerHeight,\n                left: 0\n            };\n        } else {\n            var parentRect = parent.getBoundingClientRect();\n            var parentPos = {\n                top: Math.ceil(parentRect.top),\n                right: Math.ceil(parentRect.right),\n                bottom: Math.ceil(parentRect.bottom),\n                left: Math.ceil(parentRect.left)\n            };\n        }\n//        console.info(el.nodeName, pos, 'in', parent.nodeName, parentPos, 'offset', offset);\n\n        var relTop = pos.top - parentPos.top;\n        var relRight = parentPos.right - pos.right;\n        var relBottom = parentPos.bottom - pos.bottom;\n        var relLeft = pos.left - parentPos.left;\n\n        if (relTop + offset.top < 0) { // up\n            cancelAnimation = change(parent, 'scrollTop', parent.scrollTop + relTop + offset.top, duration);\n            relBottom += relTop;\n            relTop = 0;\n        } else if (relBottom + offset.bottom < 0) { // down\n            cancelAnimation = change(parent, 'scrollTop', parent.scrollTop - relBottom + offset.bottom, duration);\n            relTop += relBottom;\n            relBottom = 0;\n        }\n        if (relLeft + offset.left < 0) { // left\n            cancelAnimation = change(parent, 'scrollLeft', parent.scrollLeft + relLeft + offset.left, duration);\n            relRight += relLeft;\n            relLeft = 0;\n        } else if (relRight + offset.right < 0) { // right\n            cancelAnimation = change(parent, 'scrollLeft', parent.scrollLeft - relRight + offset.right, duration);\n            relLeft += relRight;\n            relRight = 0;\n        }\n        if (parent.nodeName === viewportNode) {\n            return cancelAnimation;\n        }\n        var cancelParentAnimation = kbScrollTo(parent, {top: relTop, right: relTop, bottom: relBottom, left: relLeft}, duration);\n        return function () {\n            cancelAnimation();\n            cancelParentAnimation();\n        };\n    }\n    return kbScrollTo;\n});\n"],"sourceRoot":"/source/"}