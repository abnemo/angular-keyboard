{"version":3,"sources":["keyboard.module.js","KbListController.js","kbScrollTo.js","undefined.js","directives/kbItem.js","directives/kbList.js"],"names":[],"mappings":"AAAA;CACC;CACA;CACA;CACA;CACA;CACA;CACA;CACA;AACD;ACTA,oCAAoC,gBAAgB,GAAG,cAAA;IACnD;IACA;KACC;KACA;KACA;IACD;QACI;;QAEA;QACA;QACA;;QAEA;QACA;IACJ,CAAC;;IACD;QACI;;QAEA;SACC;SACA;SACA;SACA;SACA;QACD;YACI;YACA;gBACI;oBACI;gBACJ;YACJ;gBACI;YACJ;QACJ;QACA;SACC;SACA;SACA;SACA;SACA;SACA;QACD;YACI;YACA;gBACI;gBACA;oBACI;gBACJ;YACJ;gBACI;YACJ;QACJ;QACA;SACC;SACA;SACA;SACA;SACA;QACD;YACI;gBACI;YACJ;gBACI;YACJ;QACJ;QACA;SACC;SACA;SACA;SACA;SACA;QACD;YACI;gBACI;YACJ;gBACI;YACJ;QACJ;QACA;SACC;SACA;SACA;SACA;QACD;YACI;YACA;gBACI;gBACA;YACJ;YACA;QACJ;QACA;SACC;SACA;SACA;SACA;QACD;YACI;YACA;gBACI;gBACA;YACJ;YACA;QACJ;QACA;SACC;SACA;SACA;SACA;SACA;QACD;YACI;YACA;gBACI;gBACA;gBACA;oBACI;wBACI;wBACA;wBACA;oBACJ;oBACA;wBACI;4BACI;wBACJ;wBACA;wBACA;wBACA;oBACJ;oBACA;wBACI;4BACI;wBACJ;wBACA;wBACA;wBACA;oBACJ;oBACA;gBACJ;YACJ;YACA;QACJ;QACA;SACC;SACA;SACA;QACD;YACI;YACA;YACA;gBACI;gBACA;gBACA;YACJ;YACA;QACJ;IACJ;IACA;AACJ,CAAC,CAAA;AC/JD;CACC;CACA;AACD,oCAAoC,UAAU,GAAG,YAAA;IAC7C;;IAEA;IACA;IACA;IACA;QACI;IACJ;;IAEA;KACC;KACA;KACA;KACA;KACA;KACA;KACA;KACA;IACD;QACI;YACI;YACA;YACA;YACA;YACA;gBACI;YACJ;QACJ;YACI;YACA;QACJ;IACJ;;IAEA;KACC;KACA;KACA;KACA;KACA;KACA;IACD;QACI;QACA;QACA;YACI;YACA;YACA;gBACI;YACJ;YACA;QACJ;QACA;QACA;YACI;YACA;YACA;YACA;QACJ;QACA;QACA;YACI;gBACI;gBACA;gBACA;gBACA;YACJ;QACJ;YACI;YACA;gBACI;gBACA;gBACA;gBACA;YACJ;QACJ;AACR;;QAEQ;QACA;QACA;QACA;;QAEA;YACI;YACA;YACA;QACJ;YACI;YACA;YACA;QACJ;QACA;YACI;YACA;YACA;QACJ;YACI;YACA;YACA;QACJ;QACA;YACI;QACJ;QACA;QACA;YACI;YACA;QACJ;IACJ;IACA;AACJ,CAAC,CAAA;;AClHD;CACC;CACA;AACD;;ACHA;CACC;CACA;AACD,sCAAsC,MAAM,GAAG,iDAAA;IAC3C;IACA;IACA;IACA;QACI;QACA;QACA;YACI;gBACI;gBACA;YACJ;QACJ;YACI;YACA;QACJ;IACJ;IACA;QACI,YAAY,uBAAA;YACR;gBACI;gBACA;oBACI;gBACJ;YACJ;QACJ,CAAC,CAAA;QACD;QACA;YACI;YACA;;YAEA;gBACI;oBACI;gBACJ;oBACI;gBACJ;gBACA;YACJ;YACA;YACA;gBACI;YACJ;gBACI;oBACI;gBACJ;oBACI;gBACJ;YACJ;YACA;YACA;gBACI;YACJ;gBACI;oBACI;gBACJ;oBACI;gBACJ;YACJ;YACA;YACA;gBACI;YACJ;gBACI;oBACI;oBACA;gBACJ;oBACI;gBACJ;YACJ;QACJ;IACJ;AACJ,CAAC,CAAA;;AC3ED;CACC;CACA;CACA;CACA;CACA;AACD,sCAAsC,MAAM,GAAG,qBAAA;IAC3C;;IAEA;QACI;QACA;QACA;YACI;YACA;YACA;;YAEA;;YAEA;gBACI;oBACI;oBACA;wBACI;oBACJ;oBACA;oBACA;wBACI;wBACA;oBACJ;gBACJ;oBACI;gBACJ;YACJ;YACA;gBACI;YACJ;YACA;gBACI;oBACI;oBACA;gBACJ;YACJ;YACA;gBACI;gBACA;oBACI;gBACJ;gBACA;gBACA;gBACA;gBACA;YACJ;YACA;gBACI;gBACA;gBACA;YACJ;YACA;aACC;aACA;aACA;aACA;aACA;aACA;YACD;gBACI;oBACI;gBACJ;gBACA;oBACI;gBACJ;gBACA;oBACI;gBACJ;gBACA;oBACI;gBACJ;gBACA;YACJ;YACA;YACA;gBACI;gBACA;gBACA;gBACA;YACJ;YACA;gBACI;oBACI;gBACJ;gBACA;gBACA;oBACI;oBACA;oBACA;wBACI;wBACA;oBACJ;oBACA;wBACI;wBACA;oBACJ;gBACJ;oBACI;oBACA;gBACJ;gBACA;oBACI;oBACA;gBACJ;YACJ;YACA;gBACI;YACJ;gBACI;YACJ;YACA;gBACI;YACJ;gBACI;oBACI;gBACJ;gBACA;oBACI;gBACJ;YACJ;QACJ;IACJ;AACJ,CAAC,CAAA","file":"ng-keyboard.js","sourcesContent":["/**\n * ng-keyboard\n *\n * Keyboard behavior for AngularJS WebApps\n *\n *\n * Inspired by: Apple Mail\n * Implementation inspirated by: WinJS ListView http://try.buildwinjs.com/pages/listview/options/default.html\n */\nangular.module('keyboard', []);","angular.module('keyboard').factory('KbListController', function (undefined) {\n    'use strict';\n    /**\n     * @class KbListController\n     * @ngInject @param {jQElement} $element\n     */\n    function KbListController($element) {\n        this.mode = 'list';\n\n        this.selected = undefined; // Selected model(s)\n        this.active = undefined; // Model of the current list-item.\n        this.focus = undefined; // Model of the current list-item and the listview is focussed.\n\n        this._element = $element[0];\n        this._isFocusEvent = false; // Used to determine a the scroll delay, to prevent swallowed clicks\n    }\n    angular.extend(KbListController.prototype, {\n        /** @lends kbListController */\n\n        /**\n         * Select the given model.\n         * Or in multiselect mode, add the given model to the selection.\n         *\n         * @param {*} model\n         */\n        select: function (model) {\n            this.active = model;\n            if (this.mode === 'multiselect') {\n                if (this.isSelected(model) === false) {\n                    this.selected.push(model);\n                }\n            } else {\n                this.selected = model;\n            }\n        },\n        /**\n         * Deselect the given model.\n         * Or in multiselect mode, removes the given model to the selection.\n         * Does nothing if the given model isn't selected.\n         *\n         * @param {*} model\n         */\n        deselect: function (model) {\n            this.active = model;\n            if (this.mode === 'multiselect') {\n                var index = this.selected.indexOf(model);\n                if (index !== -1) {\n                    this.selected.splice(index, 1);\n                }\n            } else if (model === this.selected) {\n                this.selected = undefined;\n            }\n        },\n        /**\n         * Select or deselect the given model.\n         * Or in multiselect mode, adds or removes the given model to the selection.\n         *\n         * @param {*} model\n         */\n        toggle: function (model) {\n            if (this.isSelected(model)) {\n                this.deselect(model);\n            } else {\n                this.select(model);\n            }\n        },\n        /**\n         * Check if the given model is selected.\n         *\n         * @param {*} model\n         * @returns {Boolean}\n         */\n        isSelected: function (model) {\n            if (this.mode === 'multiselect') {\n                return this.selected.indexOf(model) !== -1;\n            } else {\n                return this.selected === model;\n            }\n        },\n        /**\n         * Activate the previous listview-item.\n         *\n         * @returns {Boolean}\n         */\n        previous: function () {\n            var prev = this._locate(this.active).previous;\n            if (prev) {\n                this.active = prev.model;\n                return true;\n            }\n            return false;\n        },\n        /**\n         * Activate the next listview-item.\n         *\n         * @returns {Boolean}\n         */\n        next: function () {\n            var next = this._locate(this.active).next;\n            if (next) {\n                this.active = next.model;\n                return true;\n            }\n            return false;\n        },\n        /**\n         * Returns the element, controller and models from the current, prevous and next listview-item.\n         *\n         * @param {*} model\n         * @returns {Object}\n         */\n        _locate: function (model) {\n            var items = this._element.querySelectorAll('[kb-item]');\n            for (var i = 0; i < items.length; i++) {\n                var el = angular.element(items.item(i));\n                var controller = el.controller('kbItem');\n                if (controller.getModel() === model) {\n                    var location = {\n                        model: model,\n                        controller: controller,\n                        element: el\n                    };\n                    if (i !== 0) {\n                        var prev = {\n                            element: angular.element(items.item(i - 1))\n                        };\n                        prev.controller = prev.element.controller('kbItem');\n                        prev.model = prev.controller.getModel();\n                        location.previous = prev;\n                    }\n                    if (i < items.length - 1) {\n                        var next = {\n                            element: angular.element(items.item(i + 1))\n                        };\n                        next.controller = next.element.controller('kbItem');\n                        next.model = next.controller.getModel();\n                        location.next = next;\n                    }\n                    return location;\n                }\n            }\n            return {};\n        },\n        /**\n         * Returns the element, controller and model of the first listview-item.\n         * @returns {Object}\n         */\n        first: function () {\n            var first = {};\n            var el = this._element.querySelector('[kb-item]');\n            if (el) {\n                first.element = angular.element(el);\n                first.controller = first.element.controller('kbItem');\n                first.model = first.controller.getModel();\n            }\n            return first;\n        }\n    });\n    return KbListController;\n});","/**\n * Helper for scrolling the active (and focussed) kb-item into a viewable area.\n */\nangular.module('keyboard').factory('kbScrollTo', function ($window) {\n    var noop = angular.noop;\n\n    var duration = 150;\n    // Most browsers scroll via scrollTop on the <body> element.\n    var viewportNode = 'BODY';\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n        viewportNode = 'HTML'; // Firefox uses the scrollTop on <html> element.\n    }\n\n    /**\n     * Change the scrollposition animated and return a function that cancels the animation\n     *\n     * @param {Element} container\n     * @param {String} property 'scrollTop' or 'scrollLeft'\n     * @param {Number} value\n     * @param {Boolean} animated\n     * @returns {Function}\n     */\n    function change(container, property, value, animated) {\n        if (animated && angular.element.prototype.animate) { // jQuery.animate is available?\n            var el = angular.element(container);\n            var props = {};\n            props[property] = value;\n            el.animate(props, duration);\n            return function () {\n                el.stop(true, true);\n            };\n        } else {\n            container[property] = value;\n            return noop;\n        }\n    }\n\n    /**\n     *\n     * @param {Element} el\n     * @param {Object} offset  Allowed hidden\n     * @param {Boolean} animated\n     * @returns {Function} cancel animation\n     */\n    function kbScrollTo(el, offset, animated) {\n        var cancelAnimation = noop;\n        var parent = el.parentElement;\n        while (parent.nodeName !== viewportNode) {\n            var parentStyle = getComputedStyle(parent);\n            var overflowStyle = parentStyle.overflow + parentStyle.overflowX + parentStyle.overflowY;\n            if (overflowStyle.match(/scroll|hidden/)) {\n                break;\n            }\n            parent = parent.parentElement;\n        }\n        var elRect = el.getBoundingClientRect();\n        var pos = {\n            top: Math.ceil(elRect.top),\n            right: Math.ceil(elRect.right),\n            bottom: Math.ceil(elRect.bottom),\n            left: Math.ceil(elRect.left)\n        };\n        // @todo Add outline-width to pos\n        if (parent.nodeName === viewportNode) {\n            var parentPos = {\n                top: 0,\n                right: $window.innerWidth,\n                bottom: $window.innerHeight,\n                left: 0\n            };\n        } else {\n            var parentRect = parent.getBoundingClientRect();\n            var parentPos = {\n                top: Math.ceil(parentRect.top),\n                right: Math.ceil(parentRect.right),\n                bottom: Math.ceil(parentRect.bottom),\n                left: Math.ceil(parentRect.left)\n            };\n        }\n//        console.info(el.nodeName, pos, 'in', parent.nodeName, parentPos, 'offset', offset);\n\n        var relTop = pos.top - parentPos.top;\n        var relRight = parentPos.right - pos.right;\n        var relBottom = parentPos.bottom - pos.bottom;\n        var relLeft = pos.left - parentPos.left;\n\n        if (relTop + offset.top < 0) { // up\n            cancelAnimation = change(parent, 'scrollTop', parent.scrollTop + relTop + offset.top, animated);\n            relBottom += relTop;\n            relTop = 0;\n        } else if (relBottom + offset.bottom < 0) { // down\n            cancelAnimation = change(parent, 'scrollTop', parent.scrollTop - relBottom + offset.bottom, animated);\n            relTop += relBottom;\n            relBottom = 0;\n        }\n        if (relLeft + offset.left < 0) { // left\n            cancelAnimation = change(parent, 'scrollLeft', parent.scrollLeft + relLeft + offset.left, animated);\n            relRight += relLeft;\n            relLeft = 0;\n        } else if (relRight + offset.right < 0) { // right\n            cancelAnimation = change(parent, 'scrollLeft', parent.scrollLeft - relRight + offset.right, animated);\n            relLeft += relRight;\n            relRight = 0;\n        }\n        if (parent.nodeName === viewportNode) {\n            return cancelAnimation;\n        }\n        var cancelParentAnimation = kbScrollTo(parent, {top: relTop, right: relTop, bottom: relBottom, left: relLeft}, animated);\n        return function () {\n            cancelAnimation();\n            cancelParentAnimation();\n        };\n    }\n    return kbScrollTo;\n});\n","/**\n * Register 'undefined' with an undefined value.\n */\nangular.module('keyboard').constant('undefined');\n","/**\n * kb-item\n */\nangular.module('keyboard').directive('kbItem', function ($animate, $parse, kbScrollTo, $timeout) {\n    'use strict';\n    var timer = null;\n    var cancelAnimation = angular.noop;\n    function scrollTo(el, _isFocusEvent) {\n        // Wrapped in a timeout, prevents issues with focus & click events and scrolls to the last activated kb-item.\n        $timeout.cancel(timer);\n        if (_isFocusEvent) {\n            timer = $timeout(function () {\n                cancelAnimation();\n                cancelAnimation = kbScrollTo(el[0], {top: 0, right: 0, bottom: 0, left: 0}, false);\n            }, 100, false);\n        } else {\n            cancelAnimation();\n            cancelAnimation = kbScrollTo(el[0], {top: 0, right: 0, bottom: 0, left: 0}, true);\n        }\n    }\n    return {\n        controller: function ($scope, $element) {\n            this.getModel = (function () {\n                var getter = $parse($element.attr('kb-item'));\n                return function () {\n                    return getter($scope);\n                };\n            }());\n        },\n        require: ['^kbList', 'kbItem'],\n        link: function ($scope, el, attrs, controllers) {\n            var kbList = controllers[0];\n            var kbItem = controllers[1];\n\n            el.on('click', function () {\n                if (kbList.mode === 'list') {\n                    kbList.select(kbItem.getModel());\n                } else {\n                    kbList.toggle(kbItem.getModel());\n                }\n                $scope.$apply();\n            });\n            var selectedClass = attrs.kbSelectedClass || 'kb-selected';\n            $scope.$watch(function () {\n                return kbList.isSelected(kbItem.getModel());\n            }, function (isSelected) {\n                if (isSelected) {\n                    $animate.addClass(el, selectedClass);\n                } else {\n                    $animate.removeClass(el, selectedClass);\n                }\n            });\n            var activeClass = attrs.kbActiveClass || 'kb-active';\n            $scope.$watch(function () {\n                return kbList.active === kbItem.getModel();\n            }, function (isActive) {\n                if (isActive) {\n                    $animate.addClass(el, activeClass);\n                } else {\n                    $animate.removeClass(el, activeClass);\n                }\n            });\n            var focusClass = attrs.kbFocusClass || 'kb-focus';\n            $scope.$watch(function () {\n                return kbList.focus === kbItem.getModel();\n            }, function (hasFocus) {\n                if (hasFocus) {\n                    $animate.addClass(el, focusClass);\n                    scrollTo(el, kbList._isFocusEvent);\n                } else {\n                    $animate.removeClass(el, focusClass);\n                }\n            });\n        }\n    };\n});\n","/**\n * kb-list directive\n *\n * Usage:\n * <div kb-list ng-model=\"selection\"> ... <div kb-item=\"aItem\">...</div> ... </div>\n */\nangular.module('keyboard').directive('kbList', function (KbListController) {\n    'use strict';\n\n    return {\n        controller: KbListController,\n        require: ['kbList', 'ngModel'],\n        link: function ($scope, el, attrs, controllers) {\n            var kbList = controllers[0];\n            var ngModel = controllers[1];\n            var hasFocus = false;\n\n            kbList.mode = attrs.kbList;\n\n            ngModel.$render = function () {\n                if (kbList.mode === 'multiselect') {\n                    var value = ngModel.$viewValue;\n                    if (angular.isArray(value) === false) {\n                        value = [];\n                    }\n                    kbList.selected = value;\n                    for (var i in value) {\n                        kbList.active = value[i];\n                        break;\n                    }\n                } else {\n                    kbList.selected = kbList.active = ngModel.$viewValue;\n                }\n            };\n            if (angular.isUndefined(el.attr('tabindex'))) {\n                el.attr('tabindex', 0);\n            }\n            el.on('click', function () {\n                if (document.activeElement !== this) { // not(:focus) ?\n                    // In Internet Explorer a click doesn't focus containers. ><\n                    el.focus();\n                }\n            });\n            el.on('focus', function (e) {\n                kbList._isFocusEvent = true;\n                if (angular.isUndefined(kbList.active)) {\n                    kbList.active = kbList.first().model;\n                }\n                kbList.focus = kbList.active;\n                hasFocus = true;\n                $scope.$apply();\n                kbList._isFocusEvent = false;\n            });\n            el.on('blur', function () {\n                kbList.focus = null;\n                hasFocus = false;\n                $scope.$apply();\n            });\n            /**\n             * Check if an ClientRect is in given direction.\n             * Allows for keyboard navigation based on an elements relative visual location.\n             *\n             * @param {string} direction 'up', 'left', 'right' or 'down',\n             * @param {ClientRect} currentRect The position of the current item.\n             */\n            function checkLocation(direction, currentRect, targetRect) {\n                if (direction === 'left' && targetRect.left < currentRect.left) {\n                    return true;\n                }\n                if (direction === 'up' && targetRect.top < currentRect.top) {\n                    return true;\n                }\n                if (direction === 'right' && targetRect.left > currentRect.left) {\n                    return true;\n                }\n                if (direction === 'down' && targetRect.top > currentRect.top) {\n                    return true;\n                }\n                return false;\n            }\n            // { e.which: direction }\n            var directions = {\n                37: 'left',\n                38: 'up',\n                39: 'right',\n                40: 'down'\n            };\n            el.on('keydown', function (e) {\n                if (angular.isUndefined(kbList.active)) {\n                    return; // all keyboard action require an active listview-item\n                }\n                var changed = false;\n                if (e.which >= 37 && e.which <= 40) { // An arrow-key?\n                    var location = kbList._locate(kbList.active);\n                    var currentRect = location.element[0].getBoundingClientRect();\n                    if (location.previous && checkLocation(directions[e.which], currentRect, location.previous.element[0].getBoundingClientRect())) {\n                        kbList.active = location.previous.model;\n                        changed = true;\n                    }\n                    if (location.next && checkLocation(directions[e.which], currentRect, location.next.element[0].getBoundingClientRect())) {\n                        kbList.active = location.next.model;\n                        changed = true;\n                    }\n                } else if (kbList.mode !== 'list' && (e.which === 32 || e.which === 13)) { // Space || Enter\n                    kbList.toggle(kbList.active);\n                    changed = true;\n                }\n                if (changed) {\n                    e.preventDefault();\n                    $scope.$apply();\n                }\n            });\n            $scope.$watch(function () {\n                return kbList.selected;\n            }, function (value) {\n                ngModel.$setViewValue(value);\n            });\n            $scope.$watch(function () {\n                return kbList.active;\n            }, function (value) {\n                if (kbList.mode === 'list') {\n                    kbList.selected = value;\n                }\n                if (hasFocus) {\n                    kbList.focus = value;\n                }\n            });\n        }\n    };\n});"],"sourceRoot":"/source/"}